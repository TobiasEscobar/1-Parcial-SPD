/*
	Tobias Fabricio Escobar 1Â°Parcial SPD
*/


#define BOTON_SUBIR 11
#define BOTON_PAUSAR 10
#define BOTON_BAJAR 9
#define LED_ROJO 13
#define LED_VERDE 12
#define LED_A 7
#define LED_B 8
#define LED_C 4
#define LED_D 3
#define LED_E 2
#define LED_F 6
#define LED_G 5

int estadoBoton = 0;
int ultimoEstadoBoton = 0;
int contador = 0;
int contadorAuxiliar = 0;

void setup() 
{
  pinMode(BOTON_SUBIR, INPUT_PULLUP);
  pinMode(BOTON_BAJAR, INPUT_PULLUP);
  pinMode(BOTON_PAUSAR, INPUT);
  pinMode(LED_ROJO, OUTPUT);
  pinMode(LED_VERDE, OUTPUT);
  pinMode(LED_A, OUTPUT);
  pinMode(LED_B, OUTPUT);
  pinMode(LED_C, OUTPUT);
  pinMode(LED_D, OUTPUT);
  pinMode(LED_E, OUTPUT);
  pinMode(LED_F, OUTPUT);
  pinMode(LED_G, OUTPUT);
  Serial.begin(9600);
}

void loop() 
{
  digitalWrite(LED_ROJO, HIGH);
  subirBajar();
}


//Prende y apaga cualquier led que se le pase por parametro 
//y tambien la duracion de prendido
void prenderLed(int led, int duracion) 
{
  digitalWrite(led, HIGH);
  delay(duracion);
  digitalWrite(led, LOW);
}

//Prende o no prende cada parte del display, dependiendo de si recibe (1) o (0)
//Recibe tamien el tiempo de duracion y utiliza la funcion prenderLed.
void prenderDisplay(int a, int b, int c, int d, int e, int f, int g, int led, int duracion) 
{
  digitalWrite(LED_A, a);
  digitalWrite(LED_B, b);
  digitalWrite(LED_C, c);
  digitalWrite(LED_D, d);
  digitalWrite(LED_E, e);
  digitalWrite(LED_F, f);
  digitalWrite(LED_G, g);
  prenderLed(led, duracion);
  apagarDisplay();
}

//Apaga a toda parte del display que este encendida en ese momento.
void apagarDisplay()
{
  digitalWrite(LED_A, LOW);
  digitalWrite(LED_B, LOW);
  digitalWrite(LED_C, LOW);
  digitalWrite(LED_D, LOW);
  digitalWrite(LED_E, LOW);
  digitalWrite(LED_F, LOW);
  digitalWrite(LED_G, LOW);
}

//Muestra cadad numero del display a traves de la llamada en cada caso de la funcion "prenderDisplay"
void display(int led, int duracion)
{
  switch(contador)
  {
  	case 0:
		Serial.println("Esta en la planta principal");
   		prenderDisplay(1, 1, 1, 1, 1, 1, 0, led, duracion);
    	break;
    case 1: 
    	Serial.println("Esta en el primer piso");
    	prenderDisplay(0, 1, 1, 0, 0, 0, 0, led, duracion);
    	break;
    case 2:
		Serial.println("Esta en el segundo piso");
    	prenderDisplay(1, 1, 0, 1, 1, 0, 1, led, duracion);
    	break;
    case 3:
	    Serial.println("Esta en el tercer piso");
    	prenderDisplay(1, 1, 1, 1, 0, 0, 1, led, duracion);
    	break;
    case 4:
	    Serial.println("Esta en el cuarto piso");
    	prenderDisplay(0, 1, 1, 0, 0, 1, 1, led, duracion);
    	break;
    case 5:
	    Serial.println("Esta en el quinto piso");
    	prenderDisplay(1, 0, 1, 1, 0, 1, 1, led, duracion);
    	break;
    case 6:
		Serial.println("Esta en el sexto piso");
    	prenderDisplay(1, 0, 1, 1, 1, 1, 1, led, duracion);
    	break;    
    case 7: 
	    Serial.println("Esta en el septimo piso");
    	prenderDisplay(1, 1, 1, 0, 0, 1, 0, led, duracion);
    	break;
  	case 8:
	    Serial.println("Esta en el octavo piso");
    	prenderDisplay(1, 1, 1, 1, 1, 1, 1, led, duracion);
    	break;
    case 9:
	    Serial.println("Esta en el noveno piso");
    	prenderDisplay(1, 1, 1, 1, 0, 1, 1, led, duracion);
    	break;
  	} 
}

//Arranca el montacargas para que empiece a subir. Recibe los parametros para el display y un booleano para cumplir (o no) una condicion
void empezarSecuenciaSubida(int led, int duracion, bool flagSubir) 
{
  if (flagSubir == true)
  {
      for(contador = contadorAuxiliar; contador <= 9; contador++) 
    { 
      contadorAuxiliar = contador;
      digitalWrite(LED_ROJO, LOW);
      display(led, duracion);
      pausarSecuencia(10); //Corta el bucle for si se mantiene presionado el boton de pausar.
    }
  }
}

//Arranca el montacargas para que empiece a bajar. Recibe los parametros para el display y un booleano para cumplir (o no) una condicion
void empezarSecuenciaBajada(int led, int duracion, bool flagBajar) 
{
  if (flagBajar == true)
  {
      for(contador = contadorAuxiliar; contador >= 0; contador--) 
    { 
      contadorAuxiliar = contador;
      digitalWrite(LED_ROJO, LOW);
      display(led, duracion); 
      pausarSecuencia(-10); //Corta el bucle for solo si se mantiene presionado el boton de pausar.
    }
  }
}

//Pausa la secuencia qe se este ejecutando manteniendo el boton de pausa
void pausarSecuencia(int valorDeCorte) {
  
  int estadoBoton = digitalRead(BOTON_PAUSAR);

  if (estadoBoton != ultimoEstadoBoton) 
  {
    if(estadoBoton == HIGH)
    {
      Serial.println("Pauso la secuencia");
      display(LED_ROJO, 3000);
      contador = valorDeCorte;
    } 
    else
    {
      Serial.println("Reanuda la secuencia");
      subirBajar();
    }
  }
  ultimoEstadoBoton = estadoBoton;
}

//Verifica si el boton de subir o bajar este prendido para que empiece su secuencia
void subirBajar() 
{
  if (digitalRead(BOTON_SUBIR) == LOW) 
  {
    empezarSecuenciaSubida(LED_VERDE, 3000, true);
  }
  if (digitalRead(BOTON_BAJAR) == LOW) 
  {
    empezarSecuenciaBajada(LED_VERDE, 3000, true);
  }
}